// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pinata/ipfs.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Ipfs struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id       uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Filename string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	Cid      string `protobuf:"bytes,4,opt,name=cid,proto3" json:"cid,omitempty"`
	Tags     string `protobuf:"bytes,5,opt,name=tags,proto3" json:"tags,omitempty"`
	Weight   string `protobuf:"bytes,6,opt,name=weight,proto3" json:"weight,omitempty"`
	Paid     string `protobuf:"bytes,7,opt,name=paid,proto3" json:"paid,omitempty"`
}

func (m *Ipfs) Reset()         { *m = Ipfs{} }
func (m *Ipfs) String() string { return proto.CompactTextString(m) }
func (*Ipfs) ProtoMessage()    {}
func (*Ipfs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2d6ef1dab023270, []int{0}
}
func (m *Ipfs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ipfs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ipfs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ipfs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipfs.Merge(m, src)
}
func (m *Ipfs) XXX_Size() int {
	return m.Size()
}
func (m *Ipfs) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipfs.DiscardUnknown(m)
}

var xxx_messageInfo_Ipfs proto.InternalMessageInfo

func (m *Ipfs) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Ipfs) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Ipfs) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *Ipfs) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *Ipfs) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

func (m *Ipfs) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func (m *Ipfs) GetPaid() string {
	if m != nil {
		return m.Paid
	}
	return ""
}

func init() {
	proto.RegisterType((*Ipfs)(nil), "jfkmlktrumpwtf.pinata.pinata.Ipfs")
}

func init() { proto.RegisterFile("pinata/ipfs.proto", fileDescriptor_b2d6ef1dab023270) }

var fileDescriptor_b2d6ef1dab023270 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0xe3, 0x34, 0xa4, 0xe0, 0x01, 0x81, 0x85, 0x90, 0x55, 0x21, 0xab, 0x62, 0xea, 0x14,
	0x0f, 0xdc, 0x80, 0xad, 0x6b, 0x47, 0x36, 0x37, 0xb1, 0xdd, 0x47, 0x9b, 0xda, 0x4a, 0x5e, 0x55,
	0xb8, 0x05, 0x27, 0xe0, 0x3c, 0x8c, 0x1d, 0x19, 0x51, 0x72, 0x11, 0x64, 0x27, 0x45, 0x62, 0xf2,
	0xf7, 0xff, 0xfa, 0x3c, 0xfc, 0x8f, 0xde, 0x7a, 0xd8, 0x2b, 0x54, 0x12, 0xbc, 0x69, 0x0b, 0xdf,
	0x38, 0x74, 0xec, 0xe1, 0xd5, 0x6c, 0xeb, 0xdd, 0x16, 0x9b, 0x43, 0xed, 0x8f, 0x68, 0x8a, 0xc1,
	0x18, 0x9f, 0xd9, 0x9d, 0x75, 0xd6, 0x45, 0x51, 0x06, 0x1a, 0xfe, 0x3c, 0x7e, 0x12, 0x9a, 0x2d,
	0xbd, 0x69, 0x19, 0xa7, 0xd3, 0xb2, 0xd1, 0x0a, 0x5d, 0xc3, 0xc9, 0x9c, 0x2c, 0xae, 0x56, 0xe7,
	0xc8, 0xae, 0x69, 0x0a, 0x15, 0x4f, 0xe7, 0x64, 0x91, 0xad, 0x52, 0xa8, 0xd8, 0x8c, 0x5e, 0x1a,
	0xd8, 0xe9, 0xbd, 0xaa, 0x35, 0x9f, 0x44, 0xf5, 0x2f, 0xb3, 0x1b, 0x3a, 0x29, 0xa1, 0xe2, 0x59,
	0xac, 0x03, 0x32, 0x46, 0x33, 0x54, 0xb6, 0xe5, 0x17, 0xb1, 0x8a, 0xcc, 0xee, 0x69, 0x7e, 0xd4,
	0x60, 0x37, 0xc8, 0xf3, 0xd8, 0x8e, 0x29, 0xb8, 0x5e, 0x41, 0xc5, 0xa7, 0x83, 0x1b, 0xf8, 0x79,
	0xf9, 0xd5, 0x09, 0x72, 0xea, 0x04, 0xf9, 0xe9, 0x04, 0xf9, 0xe8, 0x45, 0x72, 0xea, 0x45, 0xf2,
	0xdd, 0x8b, 0xe4, 0x45, 0x5a, 0xc0, 0xcd, 0x61, 0x5d, 0x94, 0xae, 0x96, 0xff, 0x97, 0xcb, 0xf1,
	0x36, 0x6f, 0x67, 0xc0, 0x77, 0xaf, 0xdb, 0x75, 0x1e, 0x27, 0x3f, 0xfd, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x39, 0x11, 0x82, 0xcb, 0x3b, 0x01, 0x00, 0x00,
}

func (m *Ipfs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ipfs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ipfs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Paid) > 0 {
		i -= len(m.Paid)
		copy(dAtA[i:], m.Paid)
		i = encodeVarintIpfs(dAtA, i, uint64(len(m.Paid)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Weight) > 0 {
		i -= len(m.Weight)
		copy(dAtA[i:], m.Weight)
		i = encodeVarintIpfs(dAtA, i, uint64(len(m.Weight)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Tags) > 0 {
		i -= len(m.Tags)
		copy(dAtA[i:], m.Tags)
		i = encodeVarintIpfs(dAtA, i, uint64(len(m.Tags)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintIpfs(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintIpfs(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintIpfs(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintIpfs(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIpfs(dAtA []byte, offset int, v uint64) int {
	offset -= sovIpfs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ipfs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovIpfs(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovIpfs(uint64(m.Id))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovIpfs(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovIpfs(uint64(l))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 1 + l + sovIpfs(uint64(l))
	}
	l = len(m.Weight)
	if l > 0 {
		n += 1 + l + sovIpfs(uint64(l))
	}
	l = len(m.Paid)
	if l > 0 {
		n += 1 + l + sovIpfs(uint64(l))
	}
	return n
}

func sovIpfs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIpfs(x uint64) (n int) {
	return sovIpfs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ipfs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ipfs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ipfs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIpfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIpfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIpfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIpfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIpfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIpfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Paid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIpfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIpfs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIpfs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpfs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpfs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIpfs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIpfs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIpfs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIpfs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIpfs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIpfs = fmt.Errorf("proto: unexpected end of group")
)
